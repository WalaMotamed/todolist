{"version":3,"sources":["components/NewItem.jsx","components/AddItemForm.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["NewItem","state","data","id","title","edited","handleEdit","setState","handleChange","e","props","listItem","currentTarget","name","value","Date","now","handleSubmit","a","async","preventDefault","axios","put","res","console","log","this","className","onSubmit","type","onChange","onClick","handleDelete","completed","handleCheck","Component","AddItemForm","newItem","AddItem","ToDoList","placeholder","disabled","MainToDoList","item","extodolist","exMainTodolist","filter","delete","status","index","findIndex","sort","get","data-toggle","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ab3713e.chunk.js","sourcesContent":["import React, {Component}  from \"react\";\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nclass NewItem extends Component {\r\n   state = {\r\n        data:{\r\n            id:null,\r\n            title:\"\", \r\n            edited:false\r\n        }\r\n    }\r\n\r\n\r\n    handleEdit=()=>{\r\n        this.setState({edited:true});\r\n    }\r\n\r\n\r\n    handleChange= e =>{\r\n       \r\n        const data = this.props.listItem;\r\n        data[e.currentTarget.name]=e.currentTarget.value;\r\n        data.id=Date.now()\r\n        this.setState({data});\r\n        \r\n    };\r\n    handleSubmit= async (e)=>{\r\n        e.preventDefault();\r\n        const data= this.props.listItem;\r\n        //data.title=title;\r\n        try {\r\n            const res = await axios.put(\r\n              \"https://jsonplaceholder.typicode.com/todos/\" + this.props.listItem.id,\r\n              data\r\n            );\r\n            console.log(res.data, \"successfully changed\");\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n\r\n       \r\n        \r\n    };\r\n    \r\n\r\n\r\n\r\n\r\n\r\n  \r\n    \r\n        render() { \r\n            const edited = this.state.edited;\r\n        \r\n            return(\r\n                //<ul className=\"list-gorup m-2\">  \r\n                    \r\n    \r\n                    <section>\r\n                            \r\n                        <li className=\"list-group-item todo-item ml-5\" >\r\n                            { edited ? \r\n                            <form onSubmit={e=> this.props.handleEdit(e)} >\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    value={this.props.listItem.title}\r\n                                    onChange={this.handleChange}\r\n                                    className=\"form-control\"\r\n                                />\r\n                            </form>\r\n                            : <span>{this.props.listItem.title}</span>}\r\n\r\n\r\n                            <div className=\"parent\">\r\n    \r\n                                <button \r\n                                    type=\"button\"\r\n                                    className=\"btn btn-outline-success float-right\"\r\n                                    onClick={this.handleEdit}\r\n                                >Edit</button> \r\n        \r\n        \r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-outline-danger ml-3 float-right \"\r\n                                    onClick={()=> this.props.handleDelete(this.props.listItem)}\r\n                                    >\r\n                                    \r\n                                    Delete\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className={this.props.listItem.completed ? 'btn btn-info ml-3 float-right':'btn btn-secondary ml-3 float-right '}\r\n                                    onClick={()=> this.props.handleCheck(this.props.listItem)}\r\n                                    >\r\n                                    {this.props.listItem.completed ? 'Check':'Uncheck'}\r\n                                </button>\r\n\r\n                            </div>\r\n                    \r\n                    \r\n                    \r\n                        </li>\r\n    \r\n                    </section>\r\n                //</ul>\r\n           \r\n            );\r\n        }\r\n\r\n\r\n}\r\n \r\nexport default NewItem;\r\n","import React , {Component} from \"react\";\r\nimport ToDoList from \"./ToDoList\";\r\nclass AddItemForm extends Component{\r\n    state={\r\n        data:{\r\n            id:null,\r\n            title:\"\", \r\n            completed:false\r\n        }\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();// pour ne pas rafraichir la page \r\n        const newItem = {...this.state.data};\r\n        if(newItem.title!==\"\"){\r\n            this.props.AddItem(newItem)\r\n            this.setState({ToDoList,data:{title:\"\",id:null}});\r\n        }\r\n    };\r\n    handleChange= e =>{\r\n        const data = {...this.state.data};\r\n        data[e.currentTarget.name]=e.currentTarget.value;\r\n        data.id=Date.now();\r\n        this.setState({data});\r\n    };  \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"addForm\">\r\n                <form onSubmit={e=> this.handleSubmit(e)} className=\"add-item-form ml-5\">\r\n                \r\n                    <input\r\n                    value={this.state.data.title}\r\n                    name=\"title\"\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Add To Do Item\"\r\n                    onChange={this.handleChange}\r\n                    />\r\n                \r\n                </form>\r\n                <button disabled={this.state.data.title===\"\"}className=\"btn btn-primary \">Add</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n   \r\n\r\n\r\n}\r\n\r\nexport default AddItemForm;\r\n","import React , {Component} from \"react\";\r\nimport NewItem from \"./NewItem\";\r\nimport axios from 'axios';\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nclass ToDoList extends Component{\r\n    state={\r\n        MainToDoList:[],\r\n        ToDoList :[\r\n            {id:1,title :\"grocery\",completed:false},\r\n            {id:2,title:\"study\",completed:false},\r\n            {id:3,title:\"wash the car\",completed:false}\r\n        ]\r\n        \r\n\r\n    \r\n    };\r\n    async componentDidMount(){\r\n        const {data} = await axios.get('https://jsonplaceholder.typicode.com/todos')\r\n        \r\n        this.setState({ToDoList:data,MainToDoList:data})\r\n\r\n\r\n    }\r\n    \r\n\r\n    AddItem= item =>{\r\n        const ToDoList=[item,...this.state.ToDoList]\r\n        this.setState({ToDoList})\r\n    }\r\n\r\n    handleChange= e =>{\r\n        const data = {...this.state.data};\r\n        data[e.currentTarget.name]=e.currentTarget.value;\r\n        data.id=Date.now();\r\n        this.setState({data});\r\n        \r\n    };\r\n    handleDelete= async listItem =>{\r\n        const extodolist= this.state.ToDoList\r\n        const exMainTodolist= this.state.MainToDoList\r\n        const ToDoList = this.state.ToDoList.filter(item => item.id !== listItem.id)\r\n        const MainToDoList = this.state.MainToDoList.filter(item => item.id !== listItem.id)\r\n        this.setState({ToDoList,MainToDoList});\r\n        try\r\n        {\r\n            const {status}= await axios.delete('https://jsonplaceholder.typicode.com/todos/'+listItem.id)\r\n        console.log(status)\r\n        }\r\n        \r\n        catch(err)\r\n        {\r\n            this.setState({ToDoList:extodolist,MainToDoList:exMainTodolist})\r\n        }\r\n\r\n        \r\n    };\r\n    handleEdit= async (e,listItem) =>{\r\n        e.preventDefault();\r\n        const extodolist= this.state.ToDoList\r\n        const exMainTodolist= this.state.MainToDoList\r\n        const data = listItem;\r\n        this.setState({ToDoList,MainToDoList:exMainTodolist});\r\n        try\r\n        {\r\n            const res= await axios.put('https://jsonplaceholder.typicode.com/todos/'+listItem.id,data)\r\n            console.log(res);\r\n            console.log(\"bien edité\");\r\n        }\r\n        \r\n        catch(err)\r\n        {\r\n            this.setState({ToDoList:extodolist,MainToDoList:exMainTodolist})\r\n        }\r\n\r\n        \r\n    };\r\n\r\n\r\n        /* handle delete : plus de temps pour repondre\r\n        const {status} = await axios.delete('https://jsonplaceholder.typicode.com/todos/'+listItem.id)\r\n        if (status===200){\r\n\r\n        console.log(listItem);\r\n        const ToDoList = this.state.ToDoList.filter(item => item.id !== listItem.id)\r\n        this.setState({ToDoList});*/\r\n\r\n    \r\n\r\n    // on peut ajouter dans state : importance and completed , pour ajouter le checkbox ou modifier le background \r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();// pour ne pas rafraichir la page \r\n        const newItem = {...this.state.data};\r\n        if(newItem.title!==\"\"){\r\n            const ToDoList=[newItem, ...this.state.ToDoList];\r\n            this.setState({ToDoList,data:{title:\"\",id:null}});\r\n\r\n        }\r\n    };\r\n    handleCheck=listItem =>{\r\n        const index=this.state.ToDoList.findIndex(item=>item.id===listItem.id)\r\n        const ToDoList=this.state.ToDoList\r\n        ToDoList[index].completed= !ToDoList[index].completed\r\n        this.setState({ToDoList});\r\n        console.log(this.state.ToDoList)\r\n    };\r\n    \r\n    \r\n    \r\n\r\n    sort=(e)=>{\r\n        const id = e.currentTarget.id\r\n        let ToDoList=[]\r\n \r\n        if(id===\"checked\")\r\n         ToDoList = this.state.MainToDoList.filter(item=>item.completed)\r\n        else if(id ==='unchecked')\r\n         ToDoList = this.state.MainToDoList.filter(item=>!item.completed)\r\n        else\r\n         ToDoList=this.state.MainToDoList\r\n          this.setState({ToDoList});\r\n\r\n    };\r\n\r\n    \r\n\r\n    render(){\r\n       \r\n        return(\r\n            <div className='container'>\r\n                <h1 className=\"text-center mb-3\">TO DO LIST</h1>\r\n                <AddItemForm AddItem={this.AddItem}/>\r\n                <div className=\"btn-group btn-group-toggle m-3 ml-5\" data-toggle=\"buttons\">\r\n                    <label className=\"btn btn-secondary \">\r\n                    <input type=\"radio\" name=\"options\" id=\"all\"  onClick={this.sort}/> All\r\n                    </label>\r\n                    <label className=\"btn btn-secondary\">\r\n                    <input type=\"radio\" name=\"options\" id=\"checked\" onClick={this.sort}/> Checked\r\n                    </label>\r\n                    <label className=\"btn btn-secondary \">\r\n                    <input type=\"radio\" name=\"options\" id=\"unchecked\" onClick={this.sort}/> Unchecked\r\n                    </label>\r\n                </div>\r\n                \r\n               <ul className=\"list-group mt-4\">\r\n                    {this.state.ToDoList.map(listItem =>(\r\n                       \r\n                        //<TodoItem listItem={listItem} handleCheck={this.handleCheck} /> pour la bouton check/uncheck il mereste à la faire\r\n                        <NewItem key={listItem.id} \r\n                        listItem={listItem} \r\n                        handleDelete={this.handleDelete} \r\n                        handleCheck={this.handleCheck} \r\n                        AddItem={this.AddItem}\r\n                        handleEdit={this.handleEdit}\r\n                         />\r\n                    )) }\r\n                </ul>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nexport default ToDoList;","import React from 'react';\n\nimport './App.css';\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  return (\n    <div className=\"container-sm\">\n      \n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}